/**
 * Object for assisting in generating the next partial context.
 */
export interface GetNextContextProps<
  KEY extends string,
  VALUE extends Record<string, unknown>,
> {
  /**
   * The entire previous context object. Use caution when referencing context generated by other providers
   * as these are not guaranteed to be included along with this context provider.
   */
  readonly priorContext: Record<string, Record<string, unknown>> &
    Record<KEY, VALUE>;

  /**
   * The action that was last taken by the agent.
   */
  readonly actionTaken: string;

  /**
   * The result of the last action taken by the agent.
   */
  readonly actionResult: string;

  /**
   * The total number of tokens allowed for this context. Updates will be rejected if the returned result exceeds this limit.
   */
  readonly maximumAllowedTokens: number;

  /**
   * A helper function for measuring the tokens consumed. Excessive invocations of this function may be computationally expensive.
   */
  readonly getTokenCount: (candidateContext: VALUE) => Promise<number>;
}

export type GetInitialContextProps<
  KEY extends string,
  VALUE extends Record<string, unknown>,
> = Omit<
  GetNextContextProps<KEY, VALUE>,
  'priorContext' | 'actionResult' | 'actionTaken'
>;

/**
 * Interface that must be implemented by all objects that provide context to the agent.
 *
 * @param KEY - The key used to index this partial context in the total context.
 * @param VALUE - The shape of this context object. Prefer flat shapes in order to provide adequate documentation
 * to the model.
 */
export interface ContextProvider<
  KEY extends string,
  VALUE extends Record<string, unknown>,
> {
  /**
   * The ContextProvider should return the next step of this part of the context. If this promise rejects,
   * the value from the previous step will be used.
   *
   * @param {GetNextContextProps} - Object for assisting in generating the next partial context.
   * @returns {Promise<VALUE extends Record<string, unknown>>} - The next iteration of the context partial generated by this provider.
   * It will be assigned to KEY in the context object.
   */
  readonly getNextContext: (
    props: GetNextContextProps<KEY, VALUE>,
  ) => Promise<VALUE>;
  /**
   * The initial context provided. If this promise rejects, this is considered a fatal error. This is only invoked
   * once on initial agent boot.
   *
   * @param {Omit<GetNextContextProps<KEY extends string, VALUE extends Record<string, unknown>>, 'priorContext'>} props - The
   * @returns {Promise<T extends Record<string, unknown>>} - The initial context partial.
   */
  readonly getInitialContext: (
    props: GetInitialContextProps<KEY, VALUE>,
  ) => Promise<VALUE>;
  /**
   * Used to assemble the initial context object. This is also referenced to the agent as the name of partial context.
   */
  readonly key: KEY;
  /**
   * A description of what this context represents. This will be provided to the agent.
   */
  readonly description: string;
  /**
   * Descriptions of each field of this context object. This will be provided to the agent.
   */
  readonly fieldDescriptions: Record<keyof VALUE, string>;
  /**
   * Optional examples of this context object. They will be provided to the agent.
   */
  readonly examples?: {
    readonly example: VALUE;
    readonly description: string;
  }[];
}
